// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;
    static int wordSize;

    /** Initializes the library. */
    function void init() {
        var int i, acc;
        let wordSize = 16;
        let bits = Array.new(wordSize);
        let i = 0;
        let acc = 1;
        while (i < wordSize) {
            let bits[i] = acc;
            let acc = acc + acc;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < wordSize) {
            if (~((y & bits[i]) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign;
        if ((x > 0) & (y > 0)) {
            let sign = 1;
        } else {
            if ((x < 0) & (y < 0)) {
                let sign = 1;
            } else {
                let sign = -1;
            }
        }
        return sign * _divide(abs(x), abs(y));
    }

    function int _divide(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) {
            return 0;
        }
        // NB: there is potentialy to optimize by not
        // redoing all these multiplications
        let q = _divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp;
        let y = 0;
        let j = (wordSize / 2) - 1;
        while (j > -1) {
            let tmp = y + bits[j];
            let tmp = tmp * tmp;
            // Overflow possible here so we put the (tmp > 0) condition
            if ((tmp > 0) & (~(tmp > x))) {
                let y = y + bits[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
