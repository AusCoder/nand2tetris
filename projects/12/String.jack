// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length, capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let chars = Memory.alloc(maxLength);
        }
        let length = 0;
        let capacity = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        // TODO: There is an issue in this dispose method
        // do I need to call dealloc(this)?
        if (capacity > 0) {
            do Memory.deAlloc(chars);
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j > -1) & (j < length)) {
            return chars[j];
        }
        do Sys.error(1);
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > -1) & (j < length)) {
            let chars[j] = c;
            return;
        }
        do Sys.error(2);
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < capacity) {
            let chars[length] = c;
            let length = length + 1;
            return this;
        }
        do Sys.error(3);
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
            let chars[length] = 0;
            return;
        }
        do Sys.error(4);
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, mult;
        var char c;

        let val = 0;
        let i = 0;
        let mult = 1;
        while (i < length) {
            let c = chars[i];
            if ((i = 0) & (c = 45)) { // possible minus sign
                let mult = -1;
                let i = i + 1;
            } else {
                if ((c > 47) & (c < 58)) { // numeric char
                    let val = (val * 10) + (c - 48);
                    let i = i + 1;
                } else { // non numeric character
                    let i = length;
                }
            }
        }
        return val * mult;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        do _setInt(val);
        return;
    }

    method void _setInt(int val) {
        var int lastDigit;

        if (val > 9) {
            do _setInt(val / 10);
        }
        let lastDigit = val - ((val / 10) * 10);
        do appendChar(lastDigit + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;  // 10?
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;  // 129?
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
